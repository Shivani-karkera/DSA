//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}

class GfG {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        //testcases
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
            String inputLine[] = br.readLine().trim().split(" ");
            
            //size of array
            int n = Integer.parseInt(inputLine[0]);
            Job[] arr = new Job[n];
            inputLine = br.readLine().trim().split(" ");
            
            //adding id, deadline, profit
            for(int i=0, k=0; i<n; i++){
                arr[i] = new Job(Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]));
            }
            
            Solution ob = new Solution();
            
            //function call
            int[] res = ob.JobScheduling(arr, n);
            System.out.println (res[0] + " " + res[1]);
        }
    }
}
// } Driver Code Ends


class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        
        // n2
        Arrays.sort(arr, new Comparator<Job>(){
            public int compare(Job j1, Job j2){
                return j2.profit-j1.profit;
            }});
            // comaparingInt(profit->Job.profit[2]-Job.profit[1]}));
        boolean[] res=new boolean[n];
        int total=0;
        int jobCount=0;
        
        for(int i=0; i<arr.length;i++){
            for(int j=Math.min(arr[i].deadline,n)-1;j>=0;j--){
            if(!res[j]){
                res[j]=true;
              total+=arr[i].profit;
              jobCount++;
              break;
                }
            }
                
            }
            return new int[] {jobCount,total};
        
        
        // nlogn
        PriorityQueue<Integer> minHeap= new PriorityQueue<Integer>();
        
         Arrays.sort(arr, new Comparator<Job>(){
            public int compare(Job j1, Job j2){
                return j2.profit-j1.profit;
            }});
            
            int total=0;
            int jobCount=0;
            for(Job j: arr){
                
                if(minHeap.size()<j.deadline){
                     minHeap.add(j.profit);
                    total+=j.profit;
                    jobCount++;
                   
                }
                else if(!minHeap.isEmpty() && minHeap.peek()<j.profit){
                    total+=j.profit-minHeap.poll();
                    minHeap.add(j.profit);
                    
                }
                
            }
        
        return new int[] {jobCount,total};
        
        
        }
    }

